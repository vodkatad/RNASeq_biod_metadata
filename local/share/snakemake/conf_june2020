import os
def find_prj_root(path=os.getcwd()):
    if os.path.isfile(os.path.join(path,".PRJ_ROOT")):
        return path
    else:
        if path:
            return find_prj_root(os.path.dirname(path))
        else:
            raise Exception("Can not find the PRJ_ROOT directory")

PRJ_ROOT=find_prj_root()
BIN_DIR=PRJ_ROOT+"/local/bin"
BIOINFO_ROOT = os.getenv('BIOINFO_ROOT')
SNAKE_ROOT=os.getenv('SNAKE_ROOT')

DATE="april2020"
DATA_DIR=PRJ_ROOT+"/local/share/data/metadata_"+DATE
 
OVERVIEW=DATA_DIR+"/RNAseq_OVERVIEW_withheader_fixed2.tsv"

BATCHES_FASTQS=[DATA_DIR + '/' + x for x in ["list_all_first","list_all_second","list_all_third","list_all_fourth", "list_all_fifth"]]
# CRC0017LMX0A02204TUMR02000 e` di troppo, depth non raggiunta

#zgrep -v '^#' fastq.featurecounts.ribo.ex.count.gz | cut -f 1,7- \
#| perl -pe 'if($.==1){s|STAR/fastq/||g; s|.STAR[^\s]+.bam||g; s|_S\d+(\s)|\1|g}' \
#| gzip > GEP.count.gz
# the perl -pe is not needed for our samples (?)

#(bit_rnaseq_2.8) egrassi@godot:/mnt/bioionfotree/prj/Biodiversa_batch4/batch4/BiT/dataset/v1$ zcat fastq.featurecounts.ribo.ex.count.gz | head -n1 | cut -f1,7-  | tr "\t" "\n" | wc -l
#259
BASE_DIR="/mnt/bioionfotree/prj"
BATCHES_COUNTS = {
    '1': 'Biodiversa_batch1/dataset/v1/fastq.featurecounts.ribo.ex.count.gz',
    '2': 'Biodiversa_batch2/dataset/v1/fastq.featurecounts.ribo.ex.count.gz',
    '3': 'Biodiversa_batch3/BiT/dataset/v1/fastq.featurecounts.ribo.ex.count.gz',
    '4': 'RNAseq_biodiversa/dataset/v1/fastq.featurecounts.ribo.ex.count.gz',   
    '5': 'RNAseq_biodiversa/dataset/batch5/fastq.featurecounts.ribo.ex.count.gz',   
}

JSON_HEAD=DATA_DIR+"/head"

PCS=PRJ_ROOT+'/local/share/data/pcs'
# TODO add rule in prj/DE ...
#setwd('/mnt/trcanmed/snaketree/prj/DE_RNASeq/dataset/Biodiversa_up5/')
# load('dds.Rdata'); library(DESeq2)
# ppca <- function (object, intgroup, pc1, pc2, ntop=500, returnData=FALSE)
# {
# rv <- rowVars(assay(object))
# select <- order(rv, decreasing = TRUE)[seq_len(min(ntop,
# length(rv)))]
# pca <- prcomp(t(assay(object)[select, ]))
# percentVar <- pca$sdev^2/sum(pca$sdev^2)
# if (!all(intgroup %in% names(colData(object)))) {
# stop("the argument 'intgroup' should specify columns of colData(dds)")
# }
# intgroup.df <- as.data.frame(colData(object)[, intgroup,
# drop = FALSE])
# group <- if (length(intgroup) > 1) {
# factor(apply(intgroup.df, 1, paste, collapse = ":"))
# }
# else {
# colData(object)[[intgroup]]
# }
# d <- data.frame(PC1 = pca$x[, pc1], PC2 = pca$x[, pc2], group = group,
# intgroup.df, name = colnames(object))
# if (returnData) {
# attr(d, "percentVar") <- percentVar[1:2]
# return(d)
# }
# d$group <- as.factor(d$group)
# ggplot(data = d, aes_string(x = "PC1", y = "PC2", color = "group")) +
# geom_point(size = 2) + xlab(paste0("PC", pc1, ': ', round(percentVar[1] *
# 100), "% variance")) + ylab(paste0("PC", pc2, ":", round(percentVar[2] *
# 100), "% variance")) + coord_fixed()+theme_bw()
# }
# pcs <- ppca(vsd, 'type', 1, 2, returnData=TRUE)
# write.table(pcs, file="/mnt/trcanmed/snaketree/prj/RNASeq_biod_metadata/local/share/data/pcs", sep="\t", quote=F)
SCORES=PRJ_ROOT+'/local/share/data/stromal_contamination.txt'